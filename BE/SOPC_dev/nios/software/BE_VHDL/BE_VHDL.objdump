
BE_VHDL.elf:     file format elf32-littlenios2
BE_VHDL.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000cd8 memsz 0x00000cd8 flags r-x
    LOAD off    0x00001cf8 vaddr 0x00000cf8 paddr 0x00000de8 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001ed8 vaddr 0x00000ed8 paddr 0x00000ed8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001de8  2**0
                  CONTENTS
  2 .text         00000c90  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00000cb0  00000cb0  00001cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00000cf8  00000de8  00001cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00000ed8  00000ed8  00001ed8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  00000ee8  00000ee8  00001de8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002e8  00000000  00000000  00001e10  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003812  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000140d  00000000  00000000  0000590a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001857  00000000  00000000  00006d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003e4  00000000  00000000  00008570  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000106d  00000000  00000000  00008954  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001388  00000000  00000000  000099c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000ad4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  0000ad90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c04d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  0000c050  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c058  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c059  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000c05a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000c065  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0000c07b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000067  00000000  00000000  0000c083  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003a05d  00000000  00000000  0000c0ea  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000cb0 l    d  .rodata	00000000 .rodata
00000cf8 l    d  .rwdata	00000000 .rwdata
00000ed8 l    d  .bss	00000000 .bss
00000ee8 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../BE_VHDL_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000015c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00000cf8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000af8 g     F .text	0000002c alt_main
00000de8 g       *ABS*	00000000 __flash_rwdata_start
00000110 g     F .text	0000004c printf
00000b24 g     F .text	00000038 alt_putstr
00000ca8 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000ed8 g     O .bss	00000004 errno
00000ee0 g     O .bss	00000004 alt_argv
00008dd8 g       *ABS*	00000000 _gp
00000b5c g     F .text	00000004 usleep
000000d4 g     F .text	0000003c _printf_r
00000934 g     F .text	00000064 .hidden __udivsi3
00000dd8 g     O .rwdata	00000004 _global_impure_ptr
00000ee8 g       *ABS*	00000000 __bss_end
00000ca0 g     F .text	00000004 alt_dcache_flush_all
00000de8 g       *ABS*	00000000 __ram_rwdata_end
00000b60 g     F .text	00000060 write
00000cf8 g       *ABS*	00000000 __ram_rodata_end
00000de0 g     O .rwdata	00000004 jtag_uart_0
00000998 g     F .text	00000058 .hidden __umodsi3
00000ee8 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00000be4 g     F .text	00000034 altera_avalon_jtag_uart_write
000001c8 g     F .text	0000052c ___vfprintf_internal_r
00000020 g     F .text	0000003c _start
00000be0 g     F .text	00000004 alt_sys_init
000009f0 g     F .text	00000028 .hidden __mulsi3
00000cf8 g       *ABS*	00000000 __ram_rwdata_start
00000cb0 g       *ABS*	00000000 __ram_rodata_start
00000c18 g     F .text	00000088 alt_busy_sleep
00000ee8 g       *ABS*	00000000 __alt_stack_base
00000710 g     F .text	000000b8 __sfvwrite_small_dev
00000ed8 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000078 main
00000edc g     O .bss	00000004 alt_envp
00000de4 g     O .rwdata	00000004 alt_errno
0000083c g     F .text	00000084 .hidden __divsi3
00000cb0 g       *ABS*	00000000 __flash_rodata_start
00000bc0 g     F .text	00000020 alt_irq_init
000007e4 g     F .text	00000058 _write_r
00000ddc g     O .rwdata	00000004 _impure_ptr
00000ee4 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000de8 g       *ABS*	00000000 _edata
00000ee8 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000008c0 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_ram
0000000c g       .entry	00000000 _exit
000007c8 g     F .text	0000001c strlen
00000ca4 g     F .text	00000004 alt_icache_flush_all
000006f4 g     F .text	0000001c __vfprintf_internal
00000a18 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a37614 	ori	gp,gp,36312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1083b614 	ori	r2,r2,3800

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c3ba14 	ori	r3,r3,3816

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	0000a180 	call	a18 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	0000af80 	call	af8 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:
#define ANEMOMETRE_get_freq() *ANEMOMETRE_data & 0xFF


int main()
{ 
	alt_putstr("Hello from Nios II!\n");
  5c:	01000034 	movhi	r4,0
#define ANEMOMETRE_Config(ST, continu, reset) (*ANEMOMETRE_conf = (ST << 2) | (continu << 1) | reset)
#define ANEMOMETRE_get_freq() *ANEMOMETRE_data & 0xFF


int main()
{ 
  60:	defffd04 	addi	sp,sp,-12
	alt_putstr("Hello from Nios II!\n");
  64:	21032c04 	addi	r4,r4,3248
#define ANEMOMETRE_Config(ST, continu, reset) (*ANEMOMETRE_conf = (ST << 2) | (continu << 1) | reset)
#define ANEMOMETRE_get_freq() *ANEMOMETRE_data & 0xFF


int main()
{ 
  68:	dc400115 	stw	r17,4(sp)
  6c:	dc000015 	stw	r16,0(sp)
  70:	dfc00215 	stw	ra,8(sp)
	alt_putstr("Hello from Nios II!\n");
  74:	0000b240 	call	b24 <alt_putstr>
	  uint32_t * anemo_read = (uint32_t *)AVALONANEMO_0_BASE + 1;
	  uint32_t * anemo_write = (uint32_t *)AVALONANEMO_0_BASE;
	  int x = 0;

	  //*anemo_write = 0b110; //start = 1 ; continue = 1 ; reste = 0
	  ANEMOMETRE_Config(0,0,0);
  78:	00a40814 	movui	r2,36896
  7c:	10000015 	stw	zero,0(r2)

	  /* Event loop never exits. */
	  while (1){
		  *leds=1;
  80:	04240014 	movui	r16,36864
  84:	04400044 	movi	r17,1
		  usleep(500000);
  88:	01000234 	movhi	r4,8
  8c:	21284804 	addi	r4,r4,-24288
	  //*anemo_write = 0b110; //start = 1 ; continue = 1 ; reste = 0
	  ANEMOMETRE_Config(0,0,0);

	  /* Event loop never exits. */
	  while (1){
		  *leds=1;
  90:	84400015 	stw	r17,0(r16)
		  usleep(500000);
  94:	0000b5c0 	call	b5c <usleep>
		  alt_putstr("Je sais blinker une led frerot xD!\n");
  98:	01000034 	movhi	r4,0
  9c:	21033204 	addi	r4,r4,3272
  a0:	0000b240 	call	b24 <alt_putstr>
		  *leds=0;


		  if( *anemo_read && 0x100)
  a4:	00a40914 	movui	r2,36900
	  /* Event loop never exits. */
	  while (1){
		  *leds=1;
		  usleep(500000);
		  alt_putstr("Je sais blinker une led frerot xD!\n");
		  *leds=0;
  a8:	80000015 	stw	zero,0(r16)


		  if( *anemo_read && 0x100)
  ac:	11400017 	ldw	r5,0(r2)
  b0:	28000426 	beq	r5,zero,c4 <main+0x68>
		  {
			  //printf("frequence lu : %d\n wait 500m sec\n", *anemo_read);
			  printf("Freq = %d\n", ANEMOMETRE_get_freq());
  b4:	01000034 	movhi	r4,0
  b8:	29403fcc 	andi	r5,r5,255
  bc:	21033b04 	addi	r4,r4,3308
  c0:	00001100 	call	110 <printf>





		  usleep(500000);
  c4:	01000234 	movhi	r4,8
  c8:	21284804 	addi	r4,r4,-24288
  cc:	0000b5c0 	call	b5c <usleep>





	  }
  d0:	003fed06 	br	88 <main+0x2c>

000000d4 <_printf_r>:
  d4:	defffd04 	addi	sp,sp,-12
  d8:	dfc00015 	stw	ra,0(sp)
  dc:	d9800115 	stw	r6,4(sp)
  e0:	d9c00215 	stw	r7,8(sp)
  e4:	20c00217 	ldw	r3,8(r4)
  e8:	01800034 	movhi	r6,0
  ec:	3181c404 	addi	r6,r6,1808
  f0:	19800115 	stw	r6,4(r3)
  f4:	280d883a 	mov	r6,r5
  f8:	21400217 	ldw	r5,8(r4)
  fc:	d9c00104 	addi	r7,sp,4
 100:	00001c80 	call	1c8 <___vfprintf_internal_r>
 104:	dfc00017 	ldw	ra,0(sp)
 108:	dec00304 	addi	sp,sp,12
 10c:	f800283a 	ret

00000110 <printf>:
 110:	defffc04 	addi	sp,sp,-16
 114:	dfc00015 	stw	ra,0(sp)
 118:	d9400115 	stw	r5,4(sp)
 11c:	d9800215 	stw	r6,8(sp)
 120:	d9c00315 	stw	r7,12(sp)
 124:	00800034 	movhi	r2,0
 128:	10837704 	addi	r2,r2,3548
 12c:	10800017 	ldw	r2,0(r2)
 130:	01400034 	movhi	r5,0
 134:	2941c404 	addi	r5,r5,1808
 138:	10c00217 	ldw	r3,8(r2)
 13c:	d9800104 	addi	r6,sp,4
 140:	19400115 	stw	r5,4(r3)
 144:	200b883a 	mov	r5,r4
 148:	11000217 	ldw	r4,8(r2)
 14c:	00006f40 	call	6f4 <__vfprintf_internal>
 150:	dfc00017 	ldw	ra,0(sp)
 154:	dec00404 	addi	sp,sp,16
 158:	f800283a 	ret

0000015c <print_repeat>:
 15c:	defffb04 	addi	sp,sp,-20
 160:	dc800315 	stw	r18,12(sp)
 164:	dc400215 	stw	r17,8(sp)
 168:	dc000115 	stw	r16,4(sp)
 16c:	dfc00415 	stw	ra,16(sp)
 170:	2025883a 	mov	r18,r4
 174:	2823883a 	mov	r17,r5
 178:	d9800005 	stb	r6,0(sp)
 17c:	3821883a 	mov	r16,r7
 180:	04000a0e 	bge	zero,r16,1ac <print_repeat+0x50>
 184:	88800117 	ldw	r2,4(r17)
 188:	01c00044 	movi	r7,1
 18c:	d80d883a 	mov	r6,sp
 190:	880b883a 	mov	r5,r17
 194:	9009883a 	mov	r4,r18
 198:	103ee83a 	callr	r2
 19c:	843fffc4 	addi	r16,r16,-1
 1a0:	103ff726 	beq	r2,zero,180 <print_repeat+0x24>
 1a4:	00bfffc4 	movi	r2,-1
 1a8:	00000106 	br	1b0 <print_repeat+0x54>
 1ac:	0005883a 	mov	r2,zero
 1b0:	dfc00417 	ldw	ra,16(sp)
 1b4:	dc800317 	ldw	r18,12(sp)
 1b8:	dc400217 	ldw	r17,8(sp)
 1bc:	dc000117 	ldw	r16,4(sp)
 1c0:	dec00504 	addi	sp,sp,20
 1c4:	f800283a 	ret

000001c8 <___vfprintf_internal_r>:
 1c8:	deffe504 	addi	sp,sp,-108
 1cc:	d8c00804 	addi	r3,sp,32
 1d0:	ddc01815 	stw	r23,96(sp)
 1d4:	dd801715 	stw	r22,92(sp)
 1d8:	dd401615 	stw	r21,88(sp)
 1dc:	dd001515 	stw	r20,84(sp)
 1e0:	dcc01415 	stw	r19,80(sp)
 1e4:	dc801315 	stw	r18,76(sp)
 1e8:	dc401215 	stw	r17,72(sp)
 1ec:	dc001115 	stw	r16,68(sp)
 1f0:	dfc01a15 	stw	ra,104(sp)
 1f4:	df001915 	stw	fp,100(sp)
 1f8:	2029883a 	mov	r20,r4
 1fc:	2823883a 	mov	r17,r5
 200:	382d883a 	mov	r22,r7
 204:	d9800f15 	stw	r6,60(sp)
 208:	0021883a 	mov	r16,zero
 20c:	d8000e15 	stw	zero,56(sp)
 210:	d8000a15 	stw	zero,40(sp)
 214:	002b883a 	mov	r21,zero
 218:	0027883a 	mov	r19,zero
 21c:	0025883a 	mov	r18,zero
 220:	d8000c15 	stw	zero,48(sp)
 224:	d8000b15 	stw	zero,44(sp)
 228:	002f883a 	mov	r23,zero
 22c:	d8c00915 	stw	r3,36(sp)
 230:	d8c00f17 	ldw	r3,60(sp)
 234:	19000003 	ldbu	r4,0(r3)
 238:	20803fcc 	andi	r2,r4,255
 23c:	1080201c 	xori	r2,r2,128
 240:	10bfe004 	addi	r2,r2,-128
 244:	10011e26 	beq	r2,zero,6c0 <___vfprintf_internal_r+0x4f8>
 248:	00c00044 	movi	r3,1
 24c:	b8c01426 	beq	r23,r3,2a0 <___vfprintf_internal_r+0xd8>
 250:	1dc00216 	blt	r3,r23,25c <___vfprintf_internal_r+0x94>
 254:	b8000626 	beq	r23,zero,270 <___vfprintf_internal_r+0xa8>
 258:	00011506 	br	6b0 <___vfprintf_internal_r+0x4e8>
 25c:	01400084 	movi	r5,2
 260:	b9401d26 	beq	r23,r5,2d8 <___vfprintf_internal_r+0x110>
 264:	014000c4 	movi	r5,3
 268:	b9402b26 	beq	r23,r5,318 <___vfprintf_internal_r+0x150>
 26c:	00011006 	br	6b0 <___vfprintf_internal_r+0x4e8>
 270:	01400944 	movi	r5,37
 274:	1140fc26 	beq	r2,r5,668 <___vfprintf_internal_r+0x4a0>
 278:	88800117 	ldw	r2,4(r17)
 27c:	d9000005 	stb	r4,0(sp)
 280:	01c00044 	movi	r7,1
 284:	d80d883a 	mov	r6,sp
 288:	880b883a 	mov	r5,r17
 28c:	a009883a 	mov	r4,r20
 290:	103ee83a 	callr	r2
 294:	1000d81e 	bne	r2,zero,5f8 <___vfprintf_internal_r+0x430>
 298:	84000044 	addi	r16,r16,1
 29c:	00010406 	br	6b0 <___vfprintf_internal_r+0x4e8>
 2a0:	01400c04 	movi	r5,48
 2a4:	1140fa26 	beq	r2,r5,690 <___vfprintf_internal_r+0x4c8>
 2a8:	01400944 	movi	r5,37
 2ac:	11400a1e 	bne	r2,r5,2d8 <___vfprintf_internal_r+0x110>
 2b0:	d8800005 	stb	r2,0(sp)
 2b4:	88800117 	ldw	r2,4(r17)
 2b8:	b80f883a 	mov	r7,r23
 2bc:	d80d883a 	mov	r6,sp
 2c0:	880b883a 	mov	r5,r17
 2c4:	a009883a 	mov	r4,r20
 2c8:	103ee83a 	callr	r2
 2cc:	1000ca1e 	bne	r2,zero,5f8 <___vfprintf_internal_r+0x430>
 2d0:	84000044 	addi	r16,r16,1
 2d4:	0000f506 	br	6ac <___vfprintf_internal_r+0x4e4>
 2d8:	25fff404 	addi	r23,r4,-48
 2dc:	bdc03fcc 	andi	r23,r23,255
 2e0:	00c00244 	movi	r3,9
 2e4:	1dc00936 	bltu	r3,r23,30c <___vfprintf_internal_r+0x144>
 2e8:	00bfffc4 	movi	r2,-1
 2ec:	90800426 	beq	r18,r2,300 <___vfprintf_internal_r+0x138>
 2f0:	01400284 	movi	r5,10
 2f4:	9009883a 	mov	r4,r18
 2f8:	00009f00 	call	9f0 <__mulsi3>
 2fc:	00000106 	br	304 <___vfprintf_internal_r+0x13c>
 300:	0005883a 	mov	r2,zero
 304:	b8a5883a 	add	r18,r23,r2
 308:	0000e206 	br	694 <___vfprintf_internal_r+0x4cc>
 30c:	01400b84 	movi	r5,46
 310:	1140e426 	beq	r2,r5,6a4 <___vfprintf_internal_r+0x4dc>
 314:	05c00084 	movi	r23,2
 318:	213ff404 	addi	r4,r4,-48
 31c:	27003fcc 	andi	fp,r4,255
 320:	00c00244 	movi	r3,9
 324:	1f000936 	bltu	r3,fp,34c <___vfprintf_internal_r+0x184>
 328:	00bfffc4 	movi	r2,-1
 32c:	98800426 	beq	r19,r2,340 <___vfprintf_internal_r+0x178>
 330:	01400284 	movi	r5,10
 334:	9809883a 	mov	r4,r19
 338:	00009f00 	call	9f0 <__mulsi3>
 33c:	00000106 	br	344 <___vfprintf_internal_r+0x17c>
 340:	0005883a 	mov	r2,zero
 344:	e0a7883a 	add	r19,fp,r2
 348:	0000d906 	br	6b0 <___vfprintf_internal_r+0x4e8>
 34c:	00c01b04 	movi	r3,108
 350:	10c0d226 	beq	r2,r3,69c <___vfprintf_internal_r+0x4d4>
 354:	013fffc4 	movi	r4,-1
 358:	99000226 	beq	r19,r4,364 <___vfprintf_internal_r+0x19c>
 35c:	d8000b15 	stw	zero,44(sp)
 360:	00000106 	br	368 <___vfprintf_internal_r+0x1a0>
 364:	04c00044 	movi	r19,1
 368:	01001a44 	movi	r4,105
 36c:	11001626 	beq	r2,r4,3c8 <___vfprintf_internal_r+0x200>
 370:	20800916 	blt	r4,r2,398 <___vfprintf_internal_r+0x1d0>
 374:	010018c4 	movi	r4,99
 378:	11008826 	beq	r2,r4,59c <___vfprintf_internal_r+0x3d4>
 37c:	01001904 	movi	r4,100
 380:	11001126 	beq	r2,r4,3c8 <___vfprintf_internal_r+0x200>
 384:	01001604 	movi	r4,88
 388:	1100c81e 	bne	r2,r4,6ac <___vfprintf_internal_r+0x4e4>
 38c:	00c00044 	movi	r3,1
 390:	d8c00e15 	stw	r3,56(sp)
 394:	00001506 	br	3ec <___vfprintf_internal_r+0x224>
 398:	01001cc4 	movi	r4,115
 39c:	11009826 	beq	r2,r4,600 <___vfprintf_internal_r+0x438>
 3a0:	20800416 	blt	r4,r2,3b4 <___vfprintf_internal_r+0x1ec>
 3a4:	01001bc4 	movi	r4,111
 3a8:	1100c01e 	bne	r2,r4,6ac <___vfprintf_internal_r+0x4e4>
 3ac:	05400204 	movi	r21,8
 3b0:	00000f06 	br	3f0 <___vfprintf_internal_r+0x228>
 3b4:	01001d44 	movi	r4,117
 3b8:	11000d26 	beq	r2,r4,3f0 <___vfprintf_internal_r+0x228>
 3bc:	01001e04 	movi	r4,120
 3c0:	11000a26 	beq	r2,r4,3ec <___vfprintf_internal_r+0x224>
 3c4:	0000b906 	br	6ac <___vfprintf_internal_r+0x4e4>
 3c8:	d8c00a17 	ldw	r3,40(sp)
 3cc:	b7000104 	addi	fp,r22,4
 3d0:	18000726 	beq	r3,zero,3f0 <___vfprintf_internal_r+0x228>
 3d4:	df000d15 	stw	fp,52(sp)
 3d8:	b5c00017 	ldw	r23,0(r22)
 3dc:	b800080e 	bge	r23,zero,400 <___vfprintf_internal_r+0x238>
 3e0:	05efc83a 	sub	r23,zero,r23
 3e4:	02400044 	movi	r9,1
 3e8:	00000606 	br	404 <___vfprintf_internal_r+0x23c>
 3ec:	05400404 	movi	r21,16
 3f0:	b0c00104 	addi	r3,r22,4
 3f4:	d8c00d15 	stw	r3,52(sp)
 3f8:	b5c00017 	ldw	r23,0(r22)
 3fc:	d8000a15 	stw	zero,40(sp)
 400:	0013883a 	mov	r9,zero
 404:	d839883a 	mov	fp,sp
 408:	b8001726 	beq	r23,zero,468 <___vfprintf_internal_r+0x2a0>
 40c:	a80b883a 	mov	r5,r21
 410:	b809883a 	mov	r4,r23
 414:	da401015 	stw	r9,64(sp)
 418:	00009340 	call	934 <__udivsi3>
 41c:	a80b883a 	mov	r5,r21
 420:	1009883a 	mov	r4,r2
 424:	102d883a 	mov	r22,r2
 428:	00009f00 	call	9f0 <__mulsi3>
 42c:	b885c83a 	sub	r2,r23,r2
 430:	00c00244 	movi	r3,9
 434:	da401017 	ldw	r9,64(sp)
 438:	18800216 	blt	r3,r2,444 <___vfprintf_internal_r+0x27c>
 43c:	10800c04 	addi	r2,r2,48
 440:	00000506 	br	458 <___vfprintf_internal_r+0x290>
 444:	d8c00e17 	ldw	r3,56(sp)
 448:	18000226 	beq	r3,zero,454 <___vfprintf_internal_r+0x28c>
 44c:	10800dc4 	addi	r2,r2,55
 450:	00000106 	br	458 <___vfprintf_internal_r+0x290>
 454:	108015c4 	addi	r2,r2,87
 458:	e0800005 	stb	r2,0(fp)
 45c:	b02f883a 	mov	r23,r22
 460:	e7000044 	addi	fp,fp,1
 464:	003fe806 	br	408 <___vfprintf_internal_r+0x240>
 468:	e6efc83a 	sub	r23,fp,sp
 46c:	9dc5c83a 	sub	r2,r19,r23
 470:	0080090e 	bge	zero,r2,498 <___vfprintf_internal_r+0x2d0>
 474:	e085883a 	add	r2,fp,r2
 478:	01400c04 	movi	r5,48
 47c:	d8c00917 	ldw	r3,36(sp)
 480:	e009883a 	mov	r4,fp
 484:	e0c0032e 	bgeu	fp,r3,494 <___vfprintf_internal_r+0x2cc>
 488:	e7000044 	addi	fp,fp,1
 48c:	21400005 	stb	r5,0(r4)
 490:	e0bffa1e 	bne	fp,r2,47c <___vfprintf_internal_r+0x2b4>
 494:	e6efc83a 	sub	r23,fp,sp
 498:	d8c00b17 	ldw	r3,44(sp)
 49c:	4dd1883a 	add	r8,r9,r23
 4a0:	922dc83a 	sub	r22,r18,r8
 4a4:	18001626 	beq	r3,zero,500 <___vfprintf_internal_r+0x338>
 4a8:	48000a26 	beq	r9,zero,4d4 <___vfprintf_internal_r+0x30c>
 4ac:	00800b44 	movi	r2,45
 4b0:	d8800805 	stb	r2,32(sp)
 4b4:	88800117 	ldw	r2,4(r17)
 4b8:	01c00044 	movi	r7,1
 4bc:	d9800804 	addi	r6,sp,32
 4c0:	880b883a 	mov	r5,r17
 4c4:	a009883a 	mov	r4,r20
 4c8:	103ee83a 	callr	r2
 4cc:	10004a1e 	bne	r2,zero,5f8 <___vfprintf_internal_r+0x430>
 4d0:	84000044 	addi	r16,r16,1
 4d4:	0580070e 	bge	zero,r22,4f4 <___vfprintf_internal_r+0x32c>
 4d8:	b00f883a 	mov	r7,r22
 4dc:	01800c04 	movi	r6,48
 4e0:	880b883a 	mov	r5,r17
 4e4:	a009883a 	mov	r4,r20
 4e8:	000015c0 	call	15c <print_repeat>
 4ec:	1000421e 	bne	r2,zero,5f8 <___vfprintf_internal_r+0x430>
 4f0:	85a1883a 	add	r16,r16,r22
 4f4:	e02d883a 	mov	r22,fp
 4f8:	bf2fc83a 	sub	r23,r23,fp
 4fc:	00002006 	br	580 <___vfprintf_internal_r+0x3b8>
 500:	0580090e 	bge	zero,r22,528 <___vfprintf_internal_r+0x360>
 504:	b00f883a 	mov	r7,r22
 508:	01800804 	movi	r6,32
 50c:	880b883a 	mov	r5,r17
 510:	a009883a 	mov	r4,r20
 514:	da401015 	stw	r9,64(sp)
 518:	000015c0 	call	15c <print_repeat>
 51c:	da401017 	ldw	r9,64(sp)
 520:	1000351e 	bne	r2,zero,5f8 <___vfprintf_internal_r+0x430>
 524:	85a1883a 	add	r16,r16,r22
 528:	483ff226 	beq	r9,zero,4f4 <___vfprintf_internal_r+0x32c>
 52c:	00800b44 	movi	r2,45
 530:	d8800805 	stb	r2,32(sp)
 534:	88800117 	ldw	r2,4(r17)
 538:	01c00044 	movi	r7,1
 53c:	d9800804 	addi	r6,sp,32
 540:	880b883a 	mov	r5,r17
 544:	a009883a 	mov	r4,r20
 548:	103ee83a 	callr	r2
 54c:	10002a1e 	bne	r2,zero,5f8 <___vfprintf_internal_r+0x430>
 550:	84000044 	addi	r16,r16,1
 554:	003fe706 	br	4f4 <___vfprintf_internal_r+0x32c>
 558:	b5bfffc4 	addi	r22,r22,-1
 55c:	b0800003 	ldbu	r2,0(r22)
 560:	01c00044 	movi	r7,1
 564:	d9800804 	addi	r6,sp,32
 568:	d8800805 	stb	r2,32(sp)
 56c:	88800117 	ldw	r2,4(r17)
 570:	880b883a 	mov	r5,r17
 574:	a009883a 	mov	r4,r20
 578:	103ee83a 	callr	r2
 57c:	10001e1e 	bne	r2,zero,5f8 <___vfprintf_internal_r+0x430>
 580:	8585c83a 	sub	r2,r16,r22
 584:	b5c9883a 	add	r4,r22,r23
 588:	e085883a 	add	r2,fp,r2
 58c:	013ff216 	blt	zero,r4,558 <___vfprintf_internal_r+0x390>
 590:	1021883a 	mov	r16,r2
 594:	dd800d17 	ldw	r22,52(sp)
 598:	00004406 	br	6ac <___vfprintf_internal_r+0x4e4>
 59c:	00800044 	movi	r2,1
 5a0:	1480080e 	bge	r2,r18,5c4 <___vfprintf_internal_r+0x3fc>
 5a4:	95ffffc4 	addi	r23,r18,-1
 5a8:	b80f883a 	mov	r7,r23
 5ac:	01800804 	movi	r6,32
 5b0:	880b883a 	mov	r5,r17
 5b4:	a009883a 	mov	r4,r20
 5b8:	000015c0 	call	15c <print_repeat>
 5bc:	10000e1e 	bne	r2,zero,5f8 <___vfprintf_internal_r+0x430>
 5c0:	85e1883a 	add	r16,r16,r23
 5c4:	b0800017 	ldw	r2,0(r22)
 5c8:	01c00044 	movi	r7,1
 5cc:	d80d883a 	mov	r6,sp
 5d0:	d8800005 	stb	r2,0(sp)
 5d4:	88800117 	ldw	r2,4(r17)
 5d8:	880b883a 	mov	r5,r17
 5dc:	a009883a 	mov	r4,r20
 5e0:	b5c00104 	addi	r23,r22,4
 5e4:	103ee83a 	callr	r2
 5e8:	1000031e 	bne	r2,zero,5f8 <___vfprintf_internal_r+0x430>
 5ec:	84000044 	addi	r16,r16,1
 5f0:	b82d883a 	mov	r22,r23
 5f4:	00002d06 	br	6ac <___vfprintf_internal_r+0x4e4>
 5f8:	00bfffc4 	movi	r2,-1
 5fc:	00003106 	br	6c4 <___vfprintf_internal_r+0x4fc>
 600:	b5c00017 	ldw	r23,0(r22)
 604:	b7000104 	addi	fp,r22,4
 608:	b809883a 	mov	r4,r23
 60c:	00007c80 	call	7c8 <strlen>
 610:	9091c83a 	sub	r8,r18,r2
 614:	102d883a 	mov	r22,r2
 618:	0200090e 	bge	zero,r8,640 <___vfprintf_internal_r+0x478>
 61c:	400f883a 	mov	r7,r8
 620:	01800804 	movi	r6,32
 624:	880b883a 	mov	r5,r17
 628:	a009883a 	mov	r4,r20
 62c:	da001015 	stw	r8,64(sp)
 630:	000015c0 	call	15c <print_repeat>
 634:	da001017 	ldw	r8,64(sp)
 638:	103fef1e 	bne	r2,zero,5f8 <___vfprintf_internal_r+0x430>
 63c:	8221883a 	add	r16,r16,r8
 640:	88800117 	ldw	r2,4(r17)
 644:	b00f883a 	mov	r7,r22
 648:	b80d883a 	mov	r6,r23
 64c:	880b883a 	mov	r5,r17
 650:	a009883a 	mov	r4,r20
 654:	103ee83a 	callr	r2
 658:	103fe71e 	bne	r2,zero,5f8 <___vfprintf_internal_r+0x430>
 65c:	85a1883a 	add	r16,r16,r22
 660:	e02d883a 	mov	r22,fp
 664:	00001106 	br	6ac <___vfprintf_internal_r+0x4e4>
 668:	00c00044 	movi	r3,1
 66c:	04ffffc4 	movi	r19,-1
 670:	d8000e15 	stw	zero,56(sp)
 674:	d8c00a15 	stw	r3,40(sp)
 678:	05400284 	movi	r21,10
 67c:	9825883a 	mov	r18,r19
 680:	d8000c15 	stw	zero,48(sp)
 684:	d8000b15 	stw	zero,44(sp)
 688:	182f883a 	mov	r23,r3
 68c:	00000806 	br	6b0 <___vfprintf_internal_r+0x4e8>
 690:	ddc00b15 	stw	r23,44(sp)
 694:	05c00084 	movi	r23,2
 698:	00000506 	br	6b0 <___vfprintf_internal_r+0x4e8>
 69c:	00c00044 	movi	r3,1
 6a0:	d8c00c15 	stw	r3,48(sp)
 6a4:	05c000c4 	movi	r23,3
 6a8:	00000106 	br	6b0 <___vfprintf_internal_r+0x4e8>
 6ac:	002f883a 	mov	r23,zero
 6b0:	d8c00f17 	ldw	r3,60(sp)
 6b4:	18c00044 	addi	r3,r3,1
 6b8:	d8c00f15 	stw	r3,60(sp)
 6bc:	003edc06 	br	230 <___vfprintf_internal_r+0x68>
 6c0:	8005883a 	mov	r2,r16
 6c4:	dfc01a17 	ldw	ra,104(sp)
 6c8:	df001917 	ldw	fp,100(sp)
 6cc:	ddc01817 	ldw	r23,96(sp)
 6d0:	dd801717 	ldw	r22,92(sp)
 6d4:	dd401617 	ldw	r21,88(sp)
 6d8:	dd001517 	ldw	r20,84(sp)
 6dc:	dcc01417 	ldw	r19,80(sp)
 6e0:	dc801317 	ldw	r18,76(sp)
 6e4:	dc401217 	ldw	r17,72(sp)
 6e8:	dc001117 	ldw	r16,68(sp)
 6ec:	dec01b04 	addi	sp,sp,108
 6f0:	f800283a 	ret

000006f4 <__vfprintf_internal>:
 6f4:	00800034 	movhi	r2,0
 6f8:	10837704 	addi	r2,r2,3548
 6fc:	300f883a 	mov	r7,r6
 700:	280d883a 	mov	r6,r5
 704:	200b883a 	mov	r5,r4
 708:	11000017 	ldw	r4,0(r2)
 70c:	00001c81 	jmpi	1c8 <___vfprintf_internal_r>

00000710 <__sfvwrite_small_dev>:
 710:	2880000b 	ldhu	r2,0(r5)
 714:	1080020c 	andi	r2,r2,8
 718:	10002126 	beq	r2,zero,7a0 <__sfvwrite_small_dev+0x90>
 71c:	2880008f 	ldh	r2,2(r5)
 720:	defffa04 	addi	sp,sp,-24
 724:	dc000015 	stw	r16,0(sp)
 728:	dfc00515 	stw	ra,20(sp)
 72c:	dd000415 	stw	r20,16(sp)
 730:	dcc00315 	stw	r19,12(sp)
 734:	dc800215 	stw	r18,8(sp)
 738:	dc400115 	stw	r17,4(sp)
 73c:	2821883a 	mov	r16,r5
 740:	10001216 	blt	r2,zero,78c <__sfvwrite_small_dev+0x7c>
 744:	2027883a 	mov	r19,r4
 748:	3025883a 	mov	r18,r6
 74c:	3823883a 	mov	r17,r7
 750:	05010004 	movi	r20,1024
 754:	04400b0e 	bge	zero,r17,784 <__sfvwrite_small_dev+0x74>
 758:	880f883a 	mov	r7,r17
 75c:	a440010e 	bge	r20,r17,764 <__sfvwrite_small_dev+0x54>
 760:	01c10004 	movi	r7,1024
 764:	8140008f 	ldh	r5,2(r16)
 768:	900d883a 	mov	r6,r18
 76c:	9809883a 	mov	r4,r19
 770:	00007e40 	call	7e4 <_write_r>
 774:	0080050e 	bge	zero,r2,78c <__sfvwrite_small_dev+0x7c>
 778:	88a3c83a 	sub	r17,r17,r2
 77c:	90a5883a 	add	r18,r18,r2
 780:	003ff406 	br	754 <__sfvwrite_small_dev+0x44>
 784:	0005883a 	mov	r2,zero
 788:	00000706 	br	7a8 <__sfvwrite_small_dev+0x98>
 78c:	8080000b 	ldhu	r2,0(r16)
 790:	10801014 	ori	r2,r2,64
 794:	8080000d 	sth	r2,0(r16)
 798:	00bfffc4 	movi	r2,-1
 79c:	00000206 	br	7a8 <__sfvwrite_small_dev+0x98>
 7a0:	00bfffc4 	movi	r2,-1
 7a4:	f800283a 	ret
 7a8:	dfc00517 	ldw	ra,20(sp)
 7ac:	dd000417 	ldw	r20,16(sp)
 7b0:	dcc00317 	ldw	r19,12(sp)
 7b4:	dc800217 	ldw	r18,8(sp)
 7b8:	dc400117 	ldw	r17,4(sp)
 7bc:	dc000017 	ldw	r16,0(sp)
 7c0:	dec00604 	addi	sp,sp,24
 7c4:	f800283a 	ret

000007c8 <strlen>:
 7c8:	2005883a 	mov	r2,r4
 7cc:	10c00007 	ldb	r3,0(r2)
 7d0:	18000226 	beq	r3,zero,7dc <strlen+0x14>
 7d4:	10800044 	addi	r2,r2,1
 7d8:	003ffc06 	br	7cc <strlen+0x4>
 7dc:	1105c83a 	sub	r2,r2,r4
 7e0:	f800283a 	ret

000007e4 <_write_r>:
 7e4:	defffd04 	addi	sp,sp,-12
 7e8:	dc000015 	stw	r16,0(sp)
 7ec:	04000034 	movhi	r16,0
 7f0:	dc400115 	stw	r17,4(sp)
 7f4:	8403b604 	addi	r16,r16,3800
 7f8:	2023883a 	mov	r17,r4
 7fc:	2809883a 	mov	r4,r5
 800:	300b883a 	mov	r5,r6
 804:	380d883a 	mov	r6,r7
 808:	dfc00215 	stw	ra,8(sp)
 80c:	80000015 	stw	zero,0(r16)
 810:	0000b600 	call	b60 <write>
 814:	00ffffc4 	movi	r3,-1
 818:	10c0031e 	bne	r2,r3,828 <_write_r+0x44>
 81c:	80c00017 	ldw	r3,0(r16)
 820:	18000126 	beq	r3,zero,828 <_write_r+0x44>
 824:	88c00015 	stw	r3,0(r17)
 828:	dfc00217 	ldw	ra,8(sp)
 82c:	dc400117 	ldw	r17,4(sp)
 830:	dc000017 	ldw	r16,0(sp)
 834:	dec00304 	addi	sp,sp,12
 838:	f800283a 	ret

0000083c <__divsi3>:
 83c:	20001b16 	blt	r4,zero,8ac <__divsi3+0x70>
 840:	000f883a 	mov	r7,zero
 844:	28001616 	blt	r5,zero,8a0 <__divsi3+0x64>
 848:	200d883a 	mov	r6,r4
 84c:	29001a2e 	bgeu	r5,r4,8b8 <__divsi3+0x7c>
 850:	00800804 	movi	r2,32
 854:	00c00044 	movi	r3,1
 858:	00000106 	br	860 <__divsi3+0x24>
 85c:	10000d26 	beq	r2,zero,894 <__divsi3+0x58>
 860:	294b883a 	add	r5,r5,r5
 864:	10bfffc4 	addi	r2,r2,-1
 868:	18c7883a 	add	r3,r3,r3
 86c:	293ffb36 	bltu	r5,r4,85c <__divsi3+0x20>
 870:	0005883a 	mov	r2,zero
 874:	18000726 	beq	r3,zero,894 <__divsi3+0x58>
 878:	0005883a 	mov	r2,zero
 87c:	31400236 	bltu	r6,r5,888 <__divsi3+0x4c>
 880:	314dc83a 	sub	r6,r6,r5
 884:	10c4b03a 	or	r2,r2,r3
 888:	1806d07a 	srli	r3,r3,1
 88c:	280ad07a 	srli	r5,r5,1
 890:	183ffa1e 	bne	r3,zero,87c <__divsi3+0x40>
 894:	38000126 	beq	r7,zero,89c <__divsi3+0x60>
 898:	0085c83a 	sub	r2,zero,r2
 89c:	f800283a 	ret
 8a0:	014bc83a 	sub	r5,zero,r5
 8a4:	39c0005c 	xori	r7,r7,1
 8a8:	003fe706 	br	848 <__divsi3+0xc>
 8ac:	0109c83a 	sub	r4,zero,r4
 8b0:	01c00044 	movi	r7,1
 8b4:	003fe306 	br	844 <__divsi3+0x8>
 8b8:	00c00044 	movi	r3,1
 8bc:	003fee06 	br	878 <__divsi3+0x3c>

000008c0 <__modsi3>:
 8c0:	20001716 	blt	r4,zero,920 <__modsi3+0x60>
 8c4:	000f883a 	mov	r7,zero
 8c8:	2005883a 	mov	r2,r4
 8cc:	28001216 	blt	r5,zero,918 <__modsi3+0x58>
 8d0:	2900162e 	bgeu	r5,r4,92c <__modsi3+0x6c>
 8d4:	01800804 	movi	r6,32
 8d8:	00c00044 	movi	r3,1
 8dc:	00000106 	br	8e4 <__modsi3+0x24>
 8e0:	30000a26 	beq	r6,zero,90c <__modsi3+0x4c>
 8e4:	294b883a 	add	r5,r5,r5
 8e8:	31bfffc4 	addi	r6,r6,-1
 8ec:	18c7883a 	add	r3,r3,r3
 8f0:	293ffb36 	bltu	r5,r4,8e0 <__modsi3+0x20>
 8f4:	18000526 	beq	r3,zero,90c <__modsi3+0x4c>
 8f8:	1806d07a 	srli	r3,r3,1
 8fc:	11400136 	bltu	r2,r5,904 <__modsi3+0x44>
 900:	1145c83a 	sub	r2,r2,r5
 904:	280ad07a 	srli	r5,r5,1
 908:	183ffb1e 	bne	r3,zero,8f8 <__modsi3+0x38>
 90c:	38000126 	beq	r7,zero,914 <__modsi3+0x54>
 910:	0085c83a 	sub	r2,zero,r2
 914:	f800283a 	ret
 918:	014bc83a 	sub	r5,zero,r5
 91c:	003fec06 	br	8d0 <__modsi3+0x10>
 920:	0109c83a 	sub	r4,zero,r4
 924:	01c00044 	movi	r7,1
 928:	003fe706 	br	8c8 <__modsi3+0x8>
 92c:	00c00044 	movi	r3,1
 930:	003ff106 	br	8f8 <__modsi3+0x38>

00000934 <__udivsi3>:
 934:	200d883a 	mov	r6,r4
 938:	2900152e 	bgeu	r5,r4,990 <__udivsi3+0x5c>
 93c:	28001416 	blt	r5,zero,990 <__udivsi3+0x5c>
 940:	00800804 	movi	r2,32
 944:	00c00044 	movi	r3,1
 948:	00000206 	br	954 <__udivsi3+0x20>
 94c:	10000e26 	beq	r2,zero,988 <__udivsi3+0x54>
 950:	28000516 	blt	r5,zero,968 <__udivsi3+0x34>
 954:	294b883a 	add	r5,r5,r5
 958:	10bfffc4 	addi	r2,r2,-1
 95c:	18c7883a 	add	r3,r3,r3
 960:	293ffa36 	bltu	r5,r4,94c <__udivsi3+0x18>
 964:	18000826 	beq	r3,zero,988 <__udivsi3+0x54>
 968:	0005883a 	mov	r2,zero
 96c:	31400236 	bltu	r6,r5,978 <__udivsi3+0x44>
 970:	314dc83a 	sub	r6,r6,r5
 974:	10c4b03a 	or	r2,r2,r3
 978:	1806d07a 	srli	r3,r3,1
 97c:	280ad07a 	srli	r5,r5,1
 980:	183ffa1e 	bne	r3,zero,96c <__udivsi3+0x38>
 984:	f800283a 	ret
 988:	0005883a 	mov	r2,zero
 98c:	f800283a 	ret
 990:	00c00044 	movi	r3,1
 994:	003ff406 	br	968 <__udivsi3+0x34>

00000998 <__umodsi3>:
 998:	2005883a 	mov	r2,r4
 99c:	2900122e 	bgeu	r5,r4,9e8 <__umodsi3+0x50>
 9a0:	28001116 	blt	r5,zero,9e8 <__umodsi3+0x50>
 9a4:	01800804 	movi	r6,32
 9a8:	00c00044 	movi	r3,1
 9ac:	00000206 	br	9b8 <__umodsi3+0x20>
 9b0:	30000c26 	beq	r6,zero,9e4 <__umodsi3+0x4c>
 9b4:	28000516 	blt	r5,zero,9cc <__umodsi3+0x34>
 9b8:	294b883a 	add	r5,r5,r5
 9bc:	31bfffc4 	addi	r6,r6,-1
 9c0:	18c7883a 	add	r3,r3,r3
 9c4:	293ffa36 	bltu	r5,r4,9b0 <__umodsi3+0x18>
 9c8:	18000626 	beq	r3,zero,9e4 <__umodsi3+0x4c>
 9cc:	1806d07a 	srli	r3,r3,1
 9d0:	11400136 	bltu	r2,r5,9d8 <__umodsi3+0x40>
 9d4:	1145c83a 	sub	r2,r2,r5
 9d8:	280ad07a 	srli	r5,r5,1
 9dc:	183ffb1e 	bne	r3,zero,9cc <__umodsi3+0x34>
 9e0:	f800283a 	ret
 9e4:	f800283a 	ret
 9e8:	00c00044 	movi	r3,1
 9ec:	003ff706 	br	9cc <__umodsi3+0x34>

000009f0 <__mulsi3>:
 9f0:	0005883a 	mov	r2,zero
 9f4:	20000726 	beq	r4,zero,a14 <__mulsi3+0x24>
 9f8:	20c0004c 	andi	r3,r4,1
 9fc:	2008d07a 	srli	r4,r4,1
 a00:	18000126 	beq	r3,zero,a08 <__mulsi3+0x18>
 a04:	1145883a 	add	r2,r2,r5
 a08:	294b883a 	add	r5,r5,r5
 a0c:	203ffa1e 	bne	r4,zero,9f8 <__mulsi3+0x8>
 a10:	f800283a 	ret
 a14:	f800283a 	ret

00000a18 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 a18:	deffff04 	addi	sp,sp,-4
 a1c:	01000034 	movhi	r4,0
 a20:	01400034 	movhi	r5,0
 a24:	dfc00015 	stw	ra,0(sp)
 a28:	21033e04 	addi	r4,r4,3320
 a2c:	29437a04 	addi	r5,r5,3560

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 a30:	2140061e 	bne	r4,r5,a4c <alt_load+0x34>
 a34:	01000034 	movhi	r4,0
 a38:	01400034 	movhi	r5,0
 a3c:	21000804 	addi	r4,r4,32
 a40:	29400804 	addi	r5,r5,32
 a44:	2140121e 	bne	r4,r5,a90 <alt_load+0x78>
 a48:	00000b06 	br	a78 <alt_load+0x60>
 a4c:	00c00034 	movhi	r3,0
 a50:	18c37a04 	addi	r3,r3,3560
 a54:	1907c83a 	sub	r3,r3,r4
 a58:	0005883a 	mov	r2,zero
  {
    while( to != end )
 a5c:	10fff526 	beq	r2,r3,a34 <alt_load+0x1c>
    {
      *to++ = *from++;
 a60:	114f883a 	add	r7,r2,r5
 a64:	39c00017 	ldw	r7,0(r7)
 a68:	110d883a 	add	r6,r2,r4
 a6c:	10800104 	addi	r2,r2,4
 a70:	31c00015 	stw	r7,0(r6)
 a74:	003ff906 	br	a5c <alt_load+0x44>
 a78:	01000034 	movhi	r4,0
 a7c:	01400034 	movhi	r5,0
 a80:	21032c04 	addi	r4,r4,3248
 a84:	29432c04 	addi	r5,r5,3248

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 a88:	2140101e 	bne	r4,r5,acc <alt_load+0xb4>
 a8c:	00000b06 	br	abc <alt_load+0xa4>
 a90:	00c00034 	movhi	r3,0
 a94:	18c00804 	addi	r3,r3,32
 a98:	1907c83a 	sub	r3,r3,r4
 a9c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 aa0:	10fff526 	beq	r2,r3,a78 <alt_load+0x60>
    {
      *to++ = *from++;
 aa4:	114f883a 	add	r7,r2,r5
 aa8:	39c00017 	ldw	r7,0(r7)
 aac:	110d883a 	add	r6,r2,r4
 ab0:	10800104 	addi	r2,r2,4
 ab4:	31c00015 	stw	r7,0(r6)
 ab8:	003ff906 	br	aa0 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 abc:	0000ca00 	call	ca0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 ac0:	dfc00017 	ldw	ra,0(sp)
 ac4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 ac8:	0000ca41 	jmpi	ca4 <alt_icache_flush_all>
 acc:	00c00034 	movhi	r3,0
 ad0:	18c33e04 	addi	r3,r3,3320
 ad4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 ad8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 adc:	18bff726 	beq	r3,r2,abc <alt_load+0xa4>
    {
      *to++ = *from++;
 ae0:	114f883a 	add	r7,r2,r5
 ae4:	39c00017 	ldw	r7,0(r7)
 ae8:	110d883a 	add	r6,r2,r4
 aec:	10800104 	addi	r2,r2,4
 af0:	31c00015 	stw	r7,0(r6)
 af4:	003ff906 	br	adc <alt_load+0xc4>

00000af8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 af8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 afc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 b00:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 b04:	0000bc00 	call	bc0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 b08:	0000be00 	call	be0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 b0c:	d1a04117 	ldw	r6,-32508(gp)
 b10:	d1604217 	ldw	r5,-32504(gp)
 b14:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 b18:	dfc00017 	ldw	ra,0(sp)
 b1c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 b20:	000005c1 	jmpi	5c <main>

00000b24 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 b24:	defffe04 	addi	sp,sp,-8
 b28:	dc000015 	stw	r16,0(sp)
 b2c:	dfc00115 	stw	ra,4(sp)
 b30:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 b34:	00007c80 	call	7c8 <strlen>
 b38:	01000034 	movhi	r4,0
 b3c:	000f883a 	mov	r7,zero
 b40:	100d883a 	mov	r6,r2
 b44:	800b883a 	mov	r5,r16
 b48:	21037804 	addi	r4,r4,3552
#else
    return fputs(str, stdout);
#endif
#endif
}
 b4c:	dfc00117 	ldw	ra,4(sp)
 b50:	dc000017 	ldw	r16,0(sp)
 b54:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 b58:	0000be41 	jmpi	be4 <altera_avalon_jtag_uart_write>

00000b5c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 b5c:	0000c181 	jmpi	c18 <alt_busy_sleep>

00000b60 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 b60:	00800044 	movi	r2,1
 b64:	20800226 	beq	r4,r2,b70 <write+0x10>
 b68:	00800084 	movi	r2,2
 b6c:	2080041e 	bne	r4,r2,b80 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 b70:	01000034 	movhi	r4,0
 b74:	000f883a 	mov	r7,zero
 b78:	21037804 	addi	r4,r4,3552
 b7c:	0000be41 	jmpi	be4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 b80:	d0a00317 	ldw	r2,-32756(gp)
 b84:	10000926 	beq	r2,zero,bac <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 b88:	deffff04 	addi	sp,sp,-4
 b8c:	dfc00015 	stw	ra,0(sp)
 b90:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 b94:	00c01444 	movi	r3,81
 b98:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 b9c:	00bfffc4 	movi	r2,-1
 ba0:	dfc00017 	ldw	ra,0(sp)
 ba4:	dec00104 	addi	sp,sp,4
 ba8:	f800283a 	ret
 bac:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 bb0:	00c01444 	movi	r3,81
 bb4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 bb8:	00bfffc4 	movi	r2,-1
 bbc:	f800283a 	ret

00000bc0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 bc0:	deffff04 	addi	sp,sp,-4
 bc4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU, nios_cpu);
 bc8:	0000ca80 	call	ca8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 bcc:	00800044 	movi	r2,1
 bd0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 bd4:	dfc00017 	ldw	ra,0(sp)
 bd8:	dec00104 	addi	sp,sp,4
 bdc:	f800283a 	ret

00000be0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 be0:	f800283a 	ret

00000be4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 be4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 be8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 bec:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 bf0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 bf4:	2980072e 	bgeu	r5,r6,c14 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 bf8:	38c00037 	ldwio	r3,0(r7)
 bfc:	18ffffec 	andhi	r3,r3,65535
 c00:	183ffc26 	beq	r3,zero,bf4 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 c04:	28c00007 	ldb	r3,0(r5)
 c08:	20c00035 	stwio	r3,0(r4)
 c0c:	29400044 	addi	r5,r5,1
 c10:	003ff806 	br	bf4 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
 c14:	f800283a 	ret

00000c18 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c18:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 c1c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c20:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 c24:	dc000015 	stw	r16,0(sp)
 c28:	dfc00115 	stw	ra,4(sp)
 c2c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c30:	00009340 	call	934 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 c34:	10001026 	beq	r2,zero,c78 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c38:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c3c:	013999b4 	movhi	r4,58982
 c40:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c44:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c48:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c4c:	297fffc4 	addi	r5,r5,-1
 c50:	283ffe1e 	bne	r5,zero,c4c <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 c54:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c58:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 c5c:	18bffb16 	blt	r3,r2,c4c <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c60:	01400144 	movi	r5,5
 c64:	8009883a 	mov	r4,r16
 c68:	00009f00 	call	9f0 <__mulsi3>
 c6c:	10bfffc4 	addi	r2,r2,-1
 c70:	103ffe1e 	bne	r2,zero,c6c <alt_busy_sleep+0x54>
 c74:	00000506 	br	c8c <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c78:	01400144 	movi	r5,5
 c7c:	8009883a 	mov	r4,r16
 c80:	00009f00 	call	9f0 <__mulsi3>
 c84:	10bfffc4 	addi	r2,r2,-1
 c88:	00bffe16 	blt	zero,r2,c84 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 c8c:	0005883a 	mov	r2,zero
 c90:	dfc00117 	ldw	ra,4(sp)
 c94:	dc000017 	ldw	r16,0(sp)
 c98:	dec00204 	addi	sp,sp,8
 c9c:	f800283a 	ret

00000ca0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 ca0:	f800283a 	ret

00000ca4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 ca4:	f800283a 	ret

00000ca8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 ca8:	000170fa 	wrctl	ienable,zero
 cac:	f800283a 	ret
